- name: Install apache2-packages
  apt:
    name: "{{ apache2_packages + apache2_additional_packages }}"
    state: present
    update_cache: yes
  tags: [install]

- name: Enable/Disable apache2 modules
  community.general.apache2_module:
    state: "{{ item.state | default(omit)}}"
    name: "{{ item.name }}"
    force: "{{ item.force | default(omit) }}"
    ignore_configcheck: "{{ item.ignore_configcheck | default(omit)}}"
    identifier: "{{ item.identifier | default(omit) }}"
  loop: "{{ apache2_modules }}"
  tags: [config]

- name: start and enable apache2
  service: name=apache2 state=started enabled=yes
  tags: [install]

- name: set ServerSignature
  lineinfile: dest="/etc/apache2/conf-available/security.conf" line="ServerSignature {{ apache2_serversignature }}" regexp=^ServerSignature
  tags: [config]

- name: set ServerTokens
  lineinfile: dest="/etc/apache2/conf-available/security.conf" line="ServerTokens {{ apache2_servertokens }}" regexp=^ServerTokens
  tags: [config]

- name: set SSL protocols
  lineinfile: dest=/etc/apache2/mods-available/ssl.conf line="  SSLProtocol {{ apache2_sslproto }}" regexp="^\s?SSLProtocol"
  tags: [config]

- name: set SSL ciphers
  lineinfile: dest=/etc/apache2/mods-available/ssl.conf line="  SSLCipherSuite {{ apache2_sslciphers }}" regexp="^\s?SSLCipherSuite"
  tags: [config]

- name: set SSLHonorCipherOrder
  lineinfile: dest=/etc/apache2/mods-available/ssl.conf line="  SSLHonorCipherOrder on" regexp="^\s?#?SSLHonorCipherOrder"
  tags: [config]

- name: create webroot
  file:
    path: "{{apache2_vhost_dir}}/{{item.name}}"
    state: directory
    owner: "{{apache2_user}}"
    group: "{{apache2_group}}"
    recurse: yes
  with_items: "{{ apache2_vhosts }}"
  when: item.name is defined and (item.vhost_dir|default(True))
  tags: [config]

- name: create vhosts
  template: src="{{ item.vhost_template | default('vhost.conf.j2') }}" dest="/etc/apache2/sites-available/{{ item.name }}.conf"
  with_items: "{{ apache2_vhosts }}"
  when: item.name is defined
  notify: restart apache2
  tags: [config]

- name: enable vhosts
  file: src="/etc/apache2/sites-available/{{ item.name }}.conf" dest="/etc/apache2/sites-enabled/{{ item.name }}.conf" state=link
  with_items: "{{ apache2_vhosts }}"
  when: (item.enabled|default(True))   
  notify: restart apache2
  tags: [config]

- name: disable vhosts
  file: dest="/etc/apache2/sites-enabled/{{ item.owner }}-{{ item.name }}.conf" state=absent
  with_items: "{{ apache2_vhosts }}"
  when: (item.enabled is defined and item.enabled == False)   
  ignore_errors: True
  notify: restart apache2
  tags: [config]

- name: disable default vhosts
  file: dest="/etc/apache2/sites-enabled/{{ item }}" state=absent
  with_items:
    - 000-default.conf
    - default-ssl.conf
  notify: restart apache2
  tags: [config]

- name: create vhost dirs
  file: dest="{{ apache2_vhost_dir }}/{{ item.name }}" state=directory owner={{ item.owner|default('www-data') }} group={{ item.group|default('www-data') }} mode={{ item.mode|default('0755') }}
  with_items:
    - "{{ apache2_vhosts }}"
  tags: [config]

- name: copy certs
  copy: src="{{ item.cert }}" dest="{{ apache2_ssl_cert_path }}/{{ item.cert | basename }}" force="yes"
  when: item.copycerts is defined and item.copycerts == True
  with_items: "{{ apache2_vhosts }}"
  tags: [config]

- name: copy keys
  copy: src="{{ item.key }}" dest="{{ apache2_ssl_key_path }}/{{ item.key | basename }}" force="yes"
  when: item.copycerts is defined and item.copycerts == True
  with_items: "{{ apache2_vhosts }}"
  tags: [config]

- name: copy certchain
  copy: src="{{ item.certchain }}" dest="{{ apache2_ssl_cert_path }}/{{ item.certchain | basename }}"
  when:
    - item.copycerts is defined and item.copycerts == True
    - item.certchain is defined
  with_items: "{{ apache2_vhosts }}"
  tags: [config]

